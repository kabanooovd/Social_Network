{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","className","s","dialog","to","id","name","Message","message","Dialogs","state","dialogPage","dialogsElements","dialogs","map","el","messagesElements","messages","dialogItems","onChange","e","updateMessageBody","currentTarget","value","text","onClick","sendMessage","compose","connect","newMessageBody","dispatch","sendMessageCreator","updateMessageFieldAC","withAuthRedirect"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,2FCiBjKC,EARI,SAACC,GAChB,OACI,sBAAKC,UAAWC,IAAEC,OAAlB,qBACI,cAAC,IAAD,CAASC,GAAI,YAAcJ,EAAMK,GAAjC,SAAsCL,EAAMM,WCCzCC,EAPC,SAACP,GACb,OACI,qBAAKC,UAAWC,IAAEM,QAAlB,SACKR,EAAMQ,WC+BJC,EAjCC,SAACT,GACb,IAAMU,EAAQV,EAAMW,WACdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAE,OAAI,cAAC,EAAD,CAAYT,KAAMS,EAAGT,KAAMD,GAAIU,EAAGV,QAC5EW,EAAmBN,EAAMO,SAASH,KAAI,SAAAC,GAAE,OAAI,cAAC,EAAD,CAASP,QAASO,EAAGP,aASvE,OACI,sBAAKP,UAAWC,IAAEW,QAAlB,UACI,qBAAKZ,UAAWC,IAAEgB,YAAlB,SACI,8BAAMN,MAEV,sBAAKX,UAAWC,IAAEe,SAAlB,UACI,8BAAMD,IAIN,0BAAUG,SAhBM,SAACC,GACzBpB,EAAMqB,kBAAkBD,EAAEE,cAAcC,QAeSA,MAAOvB,EAAMwB,OAGtD,8BACI,wBAAQC,QAhBL,kBAAMzB,EAAM0B,YAAY1B,EAAMwB,OAgBjC,2B,uBCOLG,sBACXC,aAnBkB,SAAClB,GACnB,MAAO,CACHC,WAAYD,EAAMC,WAClBa,KAAMd,EAAMC,WAAWkB,mBAIN,SAACC,GACtB,MAAO,CACHJ,YAAa,SAACG,GACVC,EAASC,YAAmBF,KAEhCR,kBAAmB,SAACG,GAChBM,EAASE,YAAqBR,SAOtCS,IAFWN,CAGblB","file":"static/js/3.06edb8a1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3kFP7\",\"dialogItems\":\"Dialogs_dialogItems__JsRtz\",\"dialog\":\"Dialogs_dialog__3khwB\",\"messages\":\"Dialogs_messages__2cSnP\",\"message\":\"Dialogs_message__2TI00\"};","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\nexport type dialogItemType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst DialogItem = (props: dialogItemType) => {\r\n    return (\r\n        <div className={s.dialog}>        {/*тут будет отображаться значек для выбора собеседника из переченя*/}\r\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype messageType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: messageType) => {\r\n    return (\r\n        <div className={s.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogPagePropsType} from \"./DialogsContainer\";\r\n\r\n\r\n\r\nconst Dialogs = (props: DialogPagePropsType) => {\r\n    const state = props.dialogPage\r\n    const dialogsElements = state.dialogs.map(el => <DialogItem name={el.name} id={el.id}/>)\r\n    const messagesElements = state.messages.map(el => <Message message={el.message}/>)\r\n    // const addNewMessage = (values: DialogsDataT) => props.sendMessage(values.newMessageBody)\r\n\r\n    const messageFieldHandler = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.updateMessageBody(e.currentTarget.value)\r\n    }\r\n\r\n    const addMessage = () => props.sendMessage(props.text)\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                <div>{dialogsElements}</div>\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                {/*<AddMessage onSubmit={addNewMessage}/>*/}\r\n\r\n\r\n                <textarea onChange={messageFieldHandler} value={props.text} />\r\n\r\n\r\n                <div>\r\n                    <button onClick={ addMessage }>Send</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {\r\n    DialogsReducerLocalStateType,\r\n    sendMessageCreator, updateMessageFieldAC,\r\n} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\ntype MapStateToPropsType = {\r\n    dialogPage: DialogsReducerLocalStateType\r\n    text: string\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n    updateMessageBody: (text: string) => void\r\n}\r\n\r\nexport type DialogPagePropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogPage: state.dialogPage,\r\n        text: state.dialogPage.newMessageBody\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        },\r\n        updateMessageBody: (text: string) => {\r\n            dispatch(updateMessageFieldAC(text))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}