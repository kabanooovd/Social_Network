{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","api/api.ts","redux/usersReducer.ts","components/common/Paginator/Paginator.tsx","assets/user.png","components/Users/User/User.tsx","components/Users/Users.tsx","assets/Spinner.gif","components/common/LoadingSpinner/LoadingSpinner.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusByHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","redux/profileReducer.ts","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","redux/common-data-reducer.ts","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","components/ErrorHandler/ErrorHandler.tsx","components/Login/Login.tsx","redux/sideBarReducer.ts","redux/redux-store.ts","App.tsx","hoc/withSuspense.tsx","index.tsx","components/Login/Login.module.css","components/Users/Users.module.css","components/Profile/MyPosts/MyPosts.module.css","components/common/Paginator/Paginator.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/Profile.module.css","components/Header/Header.module.css","hoc/withAuthRedirect.tsx","redux/dialogsReducer.ts"],"names":["module","exports","Navbar","className","s","nav","item","to","activeClassName","activeTTT","News","Music","Settings","instance","axios","create","baseURL","withCredentials","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","getProfile","console","warn","profileAPI","authAPI","getStatus","updateStatus","status","put","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","totalCount","isFetching","followingInProgress","followACSuccess","userID","type","unFollowACSuccess","setCurrentPageAC","setIsFetchingAC","followingInProgressAC","followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","Paginator","onPageChanged","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionNumber","rightPortionNumber","paginator","onClick","filter","p","map","el","index","selectedPage","notSelected","e","User","props","photoURL","user","id","src","photos","small","photoURLStyle","followed","unfollowTC","disabled","some","followTC","name","Users","u","LoadingSpinner","Spinner","loadingSpinner","getUsersPage","state","usersPage","getPageSize","getTotalCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","pageNumber","getUsersThunkCreator","this","React","Component","compose","connect","bind","getState","items","ProfileStatusByHooks","useEffect","setStatus","editMode","setEditMode","value","onBlur","updateStatusTC","autoFocus","onChange","currentTarget","onDoubleClick","ProfileInfo","profileImg","profilePerson","profile","userAva","fullName","ADD_POST","SET_USER_PROFILE","SET_STATUS","UPDATE_NEW_POST_TEXT","RM_POST","posts","message","likesCount","newPostText","lookingForAJob","lookingForAJobDescription","contacts","github","vk","facebook","instagram","twitter","website","youtube","mainLink","large","setStatusAC","Post","alt","MyPosts","memo","postsElements","arrElement","updatePostTextValues","addPost","MyPostsContainer","profilePage","postMessage","addPostActionCreator","text","UpdateNewPostTextActionCreator","Profile","content","mainInfo","ProfileContainer","match","params","loggedUserID","getUserProfileTC","getStatusTC","withAuthRedirect","auth","isAuth","withRouter","Header","header","loginBlock","login","logout_TC","initState","initMode","errorMode","setInitModeAC","setErrorModeAC","SET_USER_DATA","email","setAuthUserDataAC","payload","getAuthUserDataTC","HeaderContainer","ErrorHandler","useDispatch","useSelector","commonData","x","setTimeout","clearTimeout","description","closable","onClose","banner","Login","formik","useFormik","initialValues","password","rememberMe","validate","values","errors","test","length","onSubmit","messages","login_TC","resetForm","st","loginWrapper","href","target","formWrapper","handleSubmit","inputContainerStyles","getFieldProps","touched","errorStyles","checkboxStyles","checked","loginButtonStyles","reducers","combineReducers","action","newPost","postID","dialogPage","dialogsReducer","sideBar","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","DialogsContainer","lazy","App","path","render","Suspense","fallback","component","AppContainerData","ContainerApp","ReactDOM","StrictMode","document","getElementById","mapStateToProps","restProps","SEND_MESSAGE","FILL_MSG","dialogs","newMessageBody","body","updateMessageFieldAC","sendMessageCreator"],"mappings":"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","file":"static/js/main.9e0db3f8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3J4ew\",\"item\":\"Navbar_item__2sysk\",\"activeTTT\":\"Navbar_activeTTT__UJdHD\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Navbar.module.css'\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to='/profile/18955' activeClassName={s.activeTTT}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/dialogs' activeClassName={s.activeTTT}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/users' activeClassName={s.activeTTT}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/news' activeClassName={s.activeTTT}>News</NavLink>\r\n                </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/music' activeClassName={s.activeTTT}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/settings' activeClassName={s.activeTTT}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nconst News = () => {\r\n    return(\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\n\r\nconst Music = () => {\r\n    return(\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\n\r\nconst Settings = () => {\r\n    return(\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"5c9db236-bce8-43d4-9dbe-11cf80cb43d0\"\r\n    }\r\n\r\n})\r\n\r\nexport const usersAPI =     {\r\n    getUsers(currentPage: number = 1 , pageSize: number = 10 ) {\r\n    return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n        .then(response => response.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    getProfile(userId: string) {\r\n        console.warn('Obsolete method. Please, reuse profileAPI object')\r\n        return profileAPI.getProfile(userId)\r\n    },\r\n\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get('auth/me')\r\n    },\r\n    login(data: loginRequestData_T) {\r\n        return instance.post<CommonRequest_T<{userId: number}>>(`/auth/login`, data)\r\n    },\r\n    logout() {\r\n        return instance.delete<CommonRequest_T<{}>>(`/auth/login`)\r\n    }\r\n}\r\n\r\nexport const profileAPI =     {\r\n    getProfile(userId: string) {\r\n        return instance.get(`profile/${userId}`)\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get(`profile/status/${userId}`)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status`, {status: status})\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ntype CommonRequest_T<T> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: T\r\n}\r\n\r\ntype loginRequestData_T = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: boolean\r\n}\r\n\r\n","import {usersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport {Action, AnyAction} from 'redux'\r\n\r\nexport type ThunkType<TAction extends Action = AnyAction> = ThunkAction<Promise<void>, AppStateType, unknown, TAction>\r\n\r\nexport type LocationType = {\r\n    city: string\r\n    country: string\r\n}\r\n\r\nexport type UsersType = {\r\n    id: number\r\n    photos: {small: string, large: string}\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    location: LocationType\r\n}\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\nexport type toggleFetchingActionType = {\r\n    type: 'TOGGLE_IS_FETCHING';\r\n    isFetching: boolean\r\n}\r\nexport type setTotalUsersCountActionType = {\r\n    type: 'SET_TOTAL_USERS_COUNT'\r\n    totalCount: number\r\n}\r\nexport type setCurrentPageActionType = {\r\n    type: 'SET_CURRENT_PAGE'\r\n    currentPage: number\r\n}\r\nexport type followActionType = {\r\n    type: 'FOLLOW'\r\n    userID: number\r\n}\r\nexport type unFollowActionType = {\r\n    type: 'UNFOLLOW'\r\n    userID: number\r\n}\r\nexport type UsersToSetActionType = {\r\n    type: 'SET_USERS'\r\n    users: UsersType[]\r\n}\r\nexport type followingInProgressActionType = {\r\n    type: 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n    isFetching: boolean\r\n    userId: number\r\n\r\n}\r\n\r\ntype GeneralUsersActionTypes =    toggleFetchingActionType          | setTotalUsersCountActionType\r\n                                | setCurrentPageActionType          | followActionType\r\n                                | unFollowActionType                | UsersToSetActionType\r\n                                | followingInProgressActionType\r\n\r\nexport type UsersReducerLocalStateType = {\r\n    users: UsersType[]\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\n\r\n    let initialState: UsersReducerLocalStateType = {\r\n    users: [ ],\r\n    pageSize: 25,\r\n    totalCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\nexport const usersReducer = (state: UsersReducerLocalStateType = initialState, action: GeneralUsersActionTypes): UsersReducerLocalStateType => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW: {\r\n            return {...state, users: state.users.map(el => el.id === action.userID? {...el, followed: false} : el)}\r\n        }\r\n        case UNFOLLOW: {\r\n            return {...state, users: state.users.map(el => el.id === action.userID? {...el, followed: true} : el)}\r\n        }\r\n        case SET_USERS: {\r\n            return {...state, users: [...action.users]}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalCount: action.totalCount}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {...state, followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(el => el !== action.userId)}\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followACSuccess = (userID: number): followActionType => ({type: FOLLOW, userID})\r\nexport const unFollowACSuccess = (userID: number): unFollowActionType => ({type: UNFOLLOW, userID})\r\nexport const setUsersAC = (users: UsersType[]): UsersToSetActionType => ({type: SET_USERS, users})\r\nexport const setCurrentPageAC = (currentPage: number): setCurrentPageActionType => ({type: SET_CURRENT_PAGE, currentPage})\r\nexport const setTotalUsersCountAC = (totalCount: number): setTotalUsersCountActionType => ({type: SET_TOTAL_USERS_COUNT, totalCount})\r\nexport const setIsFetchingAC = (isFetching: boolean): toggleFetchingActionType => ({type: TOGGLE_IS_FETCHING, isFetching})\r\nexport const followingInProgressAC = (isFetching: boolean, userId: number): followingInProgressActionType => ({type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId})\r\n\r\n// Создаем thunk\r\nexport const getUsersThunkCreator = (currentPage: number, pageSize: number): ThunkType<toggleFetchingActionType | UsersToSetActionType | setTotalUsersCountActionType | setCurrentPageActionType> => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(setIsFetchingAC(true))\r\n        dispatch(setCurrentPageAC(currentPage))\r\n        let response = await usersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(setIsFetchingAC(false))\r\n        dispatch(setUsersAC(response.items))\r\n        dispatch(setTotalUsersCountAC(response.totalCount))\r\n    }\r\n}\r\n\r\nconst  followUnfollowFlow = async (dispatch: Dispatch, userID: number, apiMethod: (userID: number) => Promise<any>, actionCreator: (userID: number) =>  GeneralUsersActionTypes ) => {\r\n    dispatch(followingInProgressAC(true, userID))\r\n    let response = await apiMethod(userID)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userID))\r\n    }\r\n    dispatch(followingInProgressAC(false, userID))\r\n}\r\n\r\nexport const followTC = (userID: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        await followUnfollowFlow(dispatch, userID, usersAPI.follow.bind(usersAPI), unFollowACSuccess)\r\n    }\r\n}\r\n\r\nexport const unfollowTC = (userID: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        await followUnfollowFlow(dispatch, userID, usersAPI.unfollow.bind(usersAPI), followACSuccess)\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React, {useState} from \"react\";\r\nimport s from './Paginator.module.css'\r\n\r\nexport const Paginator = ({\r\n    totalCount,\r\n    pageSize,\r\n    onPageChanged,\r\n    currentPage,\r\n} : {\r\n    totalCount: number\r\n    pageSize: number\r\n    onPageChanged: (page: number) => void\r\n    currentPage: number\r\n}) => {\r\n\r\n    let pagesCount = Math.ceil(totalCount / pageSize)\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionSize = 10\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n\r\n    let leftPortionNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionNumber = portionNumber * portionSize;\r\n\r\n    return (\r\n        <div className={s.paginator}>\r\n            {portionNumber > 1 && <button onClick={() => setPortionNumber(portionNumber - 1)}>PREV</button>}\r\n            {pages.filter(p => p >= leftPortionNumber && p <= rightPortionNumber)\r\n            .map((el, index) => {\r\n                return (\r\n                    <div key={index}\r\n                          className={currentPage === el ? s.selectedPage : s.notSelected}\r\n                          onClick={(e) => {\r\n                              onPageChanged(el)\r\n                          }}\r\n                    >{\" \" + el + \" \"}</div>\r\n                )\r\n            })}\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => setPortionNumber(portionNumber + 1)}>NEXT</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/user.e527c605.png\";","import React from \"react\";\r\nimport s from \"../Users.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport user from \"../../../assets/user.png\";\r\nimport {UsersType} from \"../Users\";\r\n\r\nexport type User_T = {\r\n    user: UsersType\r\n    followingInProgress: number[]\r\n    followTC: (id: number) => void\r\n    unfollowTC: (id: number) => void\r\n}\r\n\r\nexport const User = (props: User_T) => {\r\n\r\n    return (\r\n        <div>\r\n                    <span>\r\n                        <div className={s.photoURL}>\r\n                            <NavLink to={'/profile/' + props.user.id}>\r\n                                <img src={props.user.photos.small != null ? props.user.photos.small : user}\r\n                                     className={s.photoURLStyle}/>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {\r\n                                !props.user.followed\r\n                                    ? <button onClick={() => props.followTC(props.user.id)}\r\n                                              disabled={props.followingInProgress.some(el => el === props.user.id)}>Follow</button>\r\n                                    : <button onClick={() => props.unfollowTC(props.user.id)}\r\n                                              disabled={props.followingInProgress.some(el => el === props.user.id)}>Un\r\n                                        Follow</button>\r\n                            }\r\n                        </div>\r\n                    </span>\r\n            <span>\r\n                        <span>\r\n                            <div>{props.user.name}</div>\r\n                            <div>{props.user.status ? props.user.status : 'no status'}</div>\r\n                        </span>\r\n                        <span>\r\n                            {/*<div>{'u.location.country'}</div>*/}\r\n                            {/*<div>{'u.location.city'}</div>*/}\r\n                        </span>\r\n                    </span>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {LocationType} from \"../../redux/usersReducer\";\r\nimport {Paginator} from \"../common/Paginator/Paginator\";\r\nimport {User} from \"./User/User\";\r\n\r\nexport type UsersType = {\r\n    id: number\r\n    photos: { small: string, large: string }\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    location: LocationType\r\n}\r\n\r\ntype PresentUsersPropsType = {\r\n    totalCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: UsersType[]\r\n    followTC: (id: number) => void\r\n    unfollowTC: (id: number) => void\r\n    followingInProgress: number[]\r\n}\r\n\r\nexport const Users = (props: PresentUsersPropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <Paginator totalCount={props.totalCount}\r\n                       pageSize={props.pageSize}\r\n                       currentPage={props.currentPage}\r\n                       onPageChanged={props.onPageChanged}\r\n            />\r\n            {\r\n                props.users.map(u => <User key={u.id}\r\n                                           user={u}\r\n                                           followingInProgress={props.followingInProgress}\r\n                                           followTC={props.followTC}\r\n                                           unfollowTC={props.unfollowTC}\r\n                    />\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/Spinner.29181c59.gif\";","import React from \"react\";\r\nimport Spinner from \"../../../assets/Spinner.gif\";\r\nimport s from \"../../Users/Users.module.css\";\r\n\r\ntype LoadingSpinnerPropsType = {}\r\n\r\nexport const LoadingSpinner = (props: LoadingSpinnerPropsType) => {\r\n    return<div><img src={Spinner} className={s.loadingSpinner}/></div>\r\n}","import {AppStateType} from \"./redux-store\";\r\n\r\nexport const getUsersPage = (state: AppStateType) => {\r\n    return state.usersPage\r\n}\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalCount = (state: AppStateType) => {\r\n    return state.usersPage.totalCount\r\n}\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//     usersPage: state.usersPage,\r\n//     pageSize: state.usersPage.pageSize,\r\n//     totalCount: state.usersPage.totalCount,\r\n//     currentPage: state.usersPage.currentPage,\r\n//     isFetching: state.usersPage.isFetching,\r\n//     followingInProgress: state.usersPage.followingInProgress","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    followingInProgressAC, followTC, getUsersThunkCreator,\r\n    setCurrentPageAC, unfollowTC, UsersReducerLocalStateType,\r\n} from \"../../redux/usersReducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Users} from \"./Users\";\r\nimport {LoadingSpinner} from \"../common/LoadingSpinner/LoadingSpinner\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalCount,\r\n    getUsersPage\r\n} from \"../../redux/users-selectors\";\r\n\r\ntype MapStateToPropsType = {\r\n    usersPage: UsersReducerLocalStateType\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    followTC: (userID: number) => void\r\n    unfollowTC: (userID: number) => void\r\n    setCurrentPageAC: (pageNumber: number) => void\r\n    followingInProgressAC: (isFetching: boolean, userId: number) => void\r\n    getUsersThunkCreator: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nexport class UsersContainer extends React.Component<UsersPropsType> {\r\n    componentDidMount() {\r\n\r\n        this.props.getUsersThunkCreator(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n\r\n        this.props.getUsersThunkCreator(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <LoadingSpinner/> : null  }\r\n            <Users totalCount={this.props.totalCount}\r\n                          pageSize={this.props.pageSize}\r\n                          currentPage={this.props.currentPage}\r\n                          onPageChanged={this.onPageChanged}\r\n                          users={this.props.usersPage.users}\r\n                          followTC={this.props.followTC}\r\n                          unfollowTC={this.props.unfollowTC}\r\n                          followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n// const mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n//     return {\r\n//         usersPage: getUsersPage(state),\r\n//         // pageSize: state.usersPage.pageSize,\r\n//         pageSize: getPageSize(state),\r\n//         totalCount: state.usersPage.totalCount,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         followingInProgress: state.usersPage.followingInProgress\r\n//     }\r\n// }\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        usersPage: getUsersPage(state),\r\n        pageSize: getPageSize(state),\r\n        totalCount: getTotalCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {\r\n        followTC, unfollowTC, setCurrentPageAC, followingInProgressAC, getUsersThunkCreator\r\n    }),\r\n    // withAuthRedirect\r\n)(UsersContainer)","import React, {useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusT = {\r\n    status: string\r\n    updateStatusTC: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusByHooks = (props: ProfileStatusT) => {\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    const turnOnInput = () => {\r\n        setEditMode(true)\r\n    }\r\n    const turnOnSpan = () => {\r\n        setEditMode(false)\r\n        props.updateStatusTC(status)\r\n    }\r\n    const changeStatusHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            {!editMode ?\r\n                <span onDoubleClick={turnOnInput}>\r\n                        {props.status || 'no status'}\r\n                    </span> :\r\n                <input type='text'\r\n                       value={status}\r\n                       onBlur={turnOnSpan}\r\n                       autoFocus={true}\r\n                       onChange={changeStatusHandler}\r\n                />}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport ProfileStatus from \"./ProfileStatus/ProfileStatus\";\r\nimport {ProfileStatusByHooks} from \"./ProfileStatus/ProfileStatusByHooks\";\r\n\r\ntype ProfileType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: ContactsForProfileType\r\n    photos: PhotosForProfileType\r\n}\r\ntype PhotosForProfileType = {\r\n    small: string\r\n    large: string\r\n}\r\ntype ContactsForProfileType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    updateStatusTC: (status: string) => void\r\n    status: string\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    return (\r\n        <div>\r\n            <div className={s.profileImg}>\r\n                {/*<img src='http://s3.fotokto.ru/photo/full/319/3199886.jpg' alt=\"\"/>*/}\r\n            </div>\r\n            <div className={s.profilePerson}>\r\n                <img src={props.profile.photos.small} className={s.userAva} />\r\n                {/*ava + description*/}\r\n                {props.profile.fullName}\r\n                {/*<ProfileStatus status={props.status} updateStatusTC={props.updateStatusTC}/>*/}\r\n                <ProfileStatusByHooks status={props.status} updateStatusTC={props.updateStatusTC} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","import {profileAPI, usersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst ADD_POST = \"profile/ADD-POST\";\r\nconst SET_USER_PROFILE = 'profile/SET_USER_PROFILE';\r\nconst SET_STATUS = 'profile/SET_STATUS';\r\nconst UPDATE_NEW_POST_TEXT = 'profile/UPDATE_NEW_POST_TEXT';\r\nconst RM_POST = 'profile/RM-POST';\r\n\r\nexport type ProfileType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: ContactsForProfileType\r\n    photos: PhotosForProfileType\r\n}\r\ntype PhotosForProfileType = {\r\n    small: string\r\n    large: string\r\n}\r\ntype ContactsForProfileType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\n\r\nlet initialState: ProfileReducerLocalStateType = {\r\n    posts: [\r\n        {id: 1, message: 'Hey mate', likesCount: 5},\r\n        {id: 2, message: 'Did you understand what is it props?', likesCount: 100}\r\n    ],\r\n    newPostText: '',\r\n    //profile: null\r\n    profile: {\r\n        userId: 0,\r\n        lookingForAJob: false,\r\n        lookingForAJobDescription: '',\r\n        fullName: '',\r\n        contacts: {\r\n            github: '',\r\n            vk: '',\r\n            facebook: '',\r\n            instagram: '',\r\n            twitter: '',\r\n            website: '',\r\n            youtube: '',\r\n            mainLink: '',\r\n        },\r\n        photos: {\r\n            small: '',\r\n            large: ''\r\n        }\r\n    },\r\n    status: ''\r\n}\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport type ProfileReducerLocalStateType = {\r\n    posts: PostsType[]\r\n    profile: ProfileType\r\n    newPostText: string\r\n    status: string\r\n}\r\n\r\ntype GeneralProfileActionType = AddPostActionType           |\r\n                                setUserProfileActionType    |\r\n                                setStatusACActionType       |\r\n                                RemoveChosenPost_T          |\r\n                                UpdateTestActionType\r\n\r\nexport const profileReducer = (state: ProfileReducerLocalStateType = initialState, action: GeneralProfileActionType) => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {id: 5, message: action.postMessage, likesCount: 0};\r\n            return {...state, posts: [newPost, ...state.posts], newPostText: ''}\r\n        }\r\n        case UPDATE_NEW_POST_TEXT: {\r\n            return {...state, newPostText: action.text}\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case SET_STATUS: {\r\n            return {...state, status: action.status}\r\n        }\r\n        case RM_POST: {\r\n            return {...state, posts: state.posts.filter(el => el.id !== action.postID)}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type RemoveChosenPost_T = ReturnType<typeof removeChosenPost>\r\nexport const removeChosenPost = (postID: number) => {\r\n    return {type: RM_POST, postID} as const\r\n}\r\n\r\nexport type setStatusACActionType = ReturnType<typeof setStatusAC>\r\nexport const setStatusAC = (status: string) =>\r\n    ({type: SET_STATUS, status}) as const\r\n\r\nexport type AddPostActionType = ReturnType<typeof addPostActionCreator>\r\nexport const addPostActionCreator = (newPostText: string) =>\r\n    ({type: ADD_POST, postMessage: newPostText}) as const\r\n\r\nexport type UpdateTestActionType = ReturnType<typeof UpdateNewPostTextActionCreator>\r\nexport const UpdateNewPostTextActionCreator = (text: string) =>\r\n    ({type: UPDATE_NEW_POST_TEXT, text: text}) as const\r\n\r\nexport type setUserProfileActionType = ReturnType<typeof setUserProfile>\r\nexport const setUserProfile = (profile: ProfileType) => {\r\n    return {type: SET_USER_PROFILE, profile} as const\r\n}\r\n\r\nexport const getStatusTC = (userId: string) => async (dispatch: Dispatch) => {\r\n    let response = await profileAPI.getStatus(userId)\r\n        dispatch(setStatusAC(response.data))\r\n}\r\n\r\nexport const updateStatusTC = (status: string) => async (dispatch: Dispatch) => {\r\n    let response = await profileAPI.updateStatus(status)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setStatusAC(status))\r\n        }\r\n}\r\n\r\nexport const getUserProfileTC = (userId: string) => async (dispatch: Dispatch) => {\r\n    let response = await usersAPI.getProfile(userId)\r\n    dispatch(setUserProfile(response.data))\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from '../MyPosts.module.css'\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\n\r\n\r\nconst Post = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <div>\r\n                <img src=\"https://million-wallpapers.ru/wallpapers/2/7/445164015493938/soldat.jpg\" alt=\"\"/>\r\n            </div>\r\n            <div>\r\n                {props.message}\r\n            </div>\r\n            <div>\r\n                Likes - {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {ProfilePageType} from \"./MyPostsContainer\";\r\n\r\nconst MyPosts =  React.memo((props: ProfilePageType) => {\r\n\r\n    const postsElements = props.posts.map(arrElement => <Post message={arrElement.message}\r\n                                                              likesCount={arrElement.likesCount}\r\n    />)\r\n\r\n    let onAddPost = () => {\r\n        props.addPost(props.newPostText)\r\n    }\r\n\r\n    const updateTextHandler = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.updatePostTextValues(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <span>\r\n                    <h3>My posts</h3>\r\n                </span>\r\n                <textarea onChange={updateTextHandler} value={props.newPostText}/>\r\n                <div>\r\n                    <button onClick={onAddPost}>Post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>{postsElements}</div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts;\r\n\r\n\r\n","import React from 'react';\r\nimport {addPostActionCreator, PostsType, UpdateNewPostTextActionCreator} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    posts: PostsType[]\r\n    newPostText: string\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (text: string) => void\r\n    updatePostTextValues: (text: string) => void\r\n}\r\n\r\nexport type ProfilePageType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n            // dispatch(UpdateNewPostTextActionCreator(text))\r\n        },\r\n        updatePostTextValues: (text: string) => {\r\n            dispatch(UpdateNewPostTextActionCreator(text))\r\n        },\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport s from './Profile.module.css'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileContainerPropsType} from \"./ProfileContainer\";\r\n\r\ntype ProfilePropsType = ProfileContainerPropsType\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatusTC={props.updateStatusTC}/>\r\n            <div className={s.mainInfo}>\r\n                <MyPostsContainer\r\n\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatusTC, getUserProfileTC, ProfileType, updateStatusTC} from \"../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withRouter, RouteComponentProps} from 'react-router-dom';\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nexport type ProfileContainerPropsType = RouteComponentProps<PathParamsType> & ownPropsType\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    loggedUserID: string\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfileTC: (getUserProfileTC: string) => void\r\n    getStatusTC: (status: string) => void\r\n    updateStatusTC: (status: string) => void\r\n\r\n}\r\nexport type ownPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.loggedUserID\r\n            // if (!userId) {\r\n            //     this.props.history.push('/login')\r\n            // }   ?????\r\n        }\r\n        this.props.getUserProfileTC(userId)\r\n        this.props.getStatusTC(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatusTC={this.props.updateStatusTC}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    loggedUserID: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, {getUserProfileTC, getStatusTC, updateStatusTC}),\r\n    withRouter\r\n)(ProfileContainer)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Header.module.css'\r\nimport {HeaderPropsType} from \"./HeaderContainer\";\r\n\r\nconst Header = (props: HeaderPropsType) => {\r\n\r\n    const logoutHandler = () => {\r\n        props.logout_TC()\r\n    }\r\n\r\n    return (\r\n        <header className={s.header}>\r\n            <img src=\"https://yt3.ggpht.com/a/AATXAJyY-srDL9oA0gDpNMLQMlvHSDUM4NaRMNUoKQ=s900-c-k-c0xffffffff-no-rj-mo\"\r\n                 alt=''/>\r\n            <div className={s.loginBlock}>\r\n                {\r\n                    props.isAuth &&\r\n                        <div>\r\n                            {props.login}\r\n                            <button onClick={logoutHandler}>Logout</button>\r\n                        </div>\r\n                }\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\n\r\nexport default Header;","import {Action, AnyAction, Dispatch} from \"redux\"\r\nimport {GeneralUsersActionTypes, getAuthUserDataTC} from \"./auth-reducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\n// export type ThunkType<TAction extends Action = AnyAction> = ThunkAction<Promise<void>, AppStateType, unknown, TAction>\r\n\r\nexport type ErrorMode_T = null | string\r\n\r\ntype CommonDataState_T = {\r\n    errorMode: ErrorMode_T\r\n    initMode: boolean\r\n}\r\nconst initState = {\r\n    initMode: false,\r\n    errorMode: null,\r\n}\r\n\r\nexport const commonDataReducer = (state: CommonDataState_T = initState, action: CommonDataAction_T): CommonDataState_T => {\r\n    switch (action.type) {\r\n        case 'DATA/SET-ERROR-MODE': {\r\n            return {...state, errorMode: action.errorMode}\r\n        }\r\n        case 'DATA/SET-INIT-MODE': {\r\n            return {...state, initMode: action.initMode}\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport type SetInitModeAC_T = ReturnType<typeof setInitModeAC>\r\nexport const setInitModeAC = (initMode: boolean) => {\r\n    return {type: 'DATA/SET-INIT-MODE', initMode} as const\r\n}\r\n\r\nexport type SetErrorModeAC_T = ReturnType<typeof setErrorModeAC>\r\nexport const setErrorModeAC = (errorMode: ErrorMode_T) => {\r\n    return {type: 'DATA/SET-ERROR-MODE', errorMode} as const\r\n}\r\n\r\nexport type CommonDataAction_T = SetErrorModeAC_T | SetInitModeAC_T","import {authAPI} from \"../api/api\";\r\nimport {Action, AnyAction, Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {setErrorModeAC, SetErrorModeAC_T, setInitModeAC} from \"./common-data-reducer\";\r\n\r\nexport type ThunkType<TAction extends Action = AnyAction> = ThunkAction<Promise<void>, AppStateType, unknown, TAction>\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA';\r\n\r\ntype AuthUserDataType = {\r\n    id: string\r\n    email: string\r\n    login: string\r\n    isAuth: boolean\r\n}\r\n\r\nexport type setUserDataActionType = {\r\n    type: 'SET_USER_DATA';\r\n    payload: AuthUserDataType\r\n}\r\n\r\nexport type GeneralUsersActionTypes = setUserDataActionType\r\n\r\nlet initialState: AuthUserDataType = {\r\n    id: '',\r\n    email: '',\r\n    login: '',\r\n    isAuth: false\r\n}\r\n\r\nexport const authReducer = (state: AuthUserDataType = initialState, action: GeneralUsersActionTypes): AuthUserDataType => {\r\n\r\n    switch (action.type) {\r\n        case SET_USER_DATA: {\r\n            return {...state, ...action.payload}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserDataAC = (id: string, email: string, login: string, isAuth: boolean):setUserDataActionType => {\r\n    return {type: \"SET_USER_DATA\", payload: {id, email, login, isAuth}}\r\n}\r\n\r\n// export const getAuthUserDataTC = () => (dispatch: Dispatch) => {\r\n//     authAPI.me().then(response => {\r\n//         if (response.data.resultCode === 0) {\r\n//             let {id, email, login} = response.data.data\r\n//             dispatch(setAuthUserDataAC(id, email, login, true))\r\n//         }\r\n//     }).then(() => {\r\n//         dispatch(setInitModeAC(true))\r\n//     })\r\n// }\r\n\r\nexport const getAuthUserDataTC = () => async (dispatch: Dispatch) => {\r\n    let response = await authAPI.me()\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data\r\n        dispatch(setAuthUserDataAC(id, email, login, true))\r\n        dispatch(setInitModeAC(true))\r\n    } else {\r\n        dispatch(setInitModeAC(true))\r\n    }\r\n}\r\n\r\n// export const login_TC = (email: string, password: string, rememberMe: boolean): ThunkType<GeneralUsersActionTypes | SetErrorModeAC_T> => {\r\n//     return async (dispatch) => {\r\n//         authAPI.login({email, password, rememberMe})\r\n//             .then(res => {\r\n//                 if (res.data.resultCode === 0) {\r\n//                     dispatch(getAuthUserDataTC())\r\n//                 } else {\r\n//                     if (res.data.messages.length) {\r\n//                         dispatch(setErrorModeAC(res.data.messages[0]))\r\n//                     } else {\r\n//                         dispatch(setErrorModeAC('Some error hes occurred'))\r\n//                     }\r\n//                 }\r\n//             })\r\n//     }\r\n// }\r\n\r\nexport const login_TC = (email: string, password: string, rememberMe: boolean): ThunkType<GeneralUsersActionTypes | SetErrorModeAC_T> => {\r\n    return async (dispatch) => {\r\n        let response = await authAPI.login({email, password, rememberMe})\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(getAuthUserDataTC())\r\n        } else {\r\n            if (response.data.messages.length) {\r\n                dispatch(setErrorModeAC(response.data.messages[0]))\r\n            } else {\r\n                dispatch(setErrorModeAC('Some error hes occurred'))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const logout_TC = () => async (dispatch: Dispatch) => {\r\n    let response = await authAPI.logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch((setAuthUserDataAC('', '', '', false)))\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export type ThunkAction<\r\n//     R, // Return type of the thunk function\r\n//     S, // state type used by getState\r\n//     E, // any \"extra argument\" injected into the thunk\r\n//     A extends Action // known types of actions that can be dispatched\r\n//     > = (dispatch: ThunkDispatch<S, E, A>, getState: () => S, extraArgument: E) => R\r\n// ThunkAction<void AppStateType unknown AnyAction>\r\n\r\n","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {logout_TC} from \"../../redux/auth-reducer\";\r\n\r\nexport type HeaderPropsType = MapDispatchToPropsType & MapStateToPropsType\r\nclass HeaderContainer extends React.Component<HeaderPropsType> {\r\n\r\n    // componentDidMount() {\r\n    //     this.props.getAuthUserDataTC()\r\n    // }\r\n\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return{\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login,\r\n    }\r\n}\r\n\r\ntype MapDispatchToPropsType =  {\r\n    // getAuthUserDataTC: () => void\r\n    logout_TC: () => void\r\n}\r\n\r\nexport default connect (mapStateToProps, {logout_TC})(HeaderContainer);","import React from 'react';\r\nimport { Alert } from 'antd';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ErrorMode_T, setErrorModeAC} from '../../redux/common-data-reducer';\r\n\r\n\r\n\r\nexport const ErrorHandler = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const errorMode = useSelector<AppStateType, ErrorMode_T>(state => state.commonData.errorMode)\r\n\r\n    const onClose = (e: React.MouseEvent<HTMLButtonElement | undefined>) => {\r\n        // console.log(e, 'I was closed.');\r\n    };\r\n\r\n    let x = setTimeout( () => {\r\n        dispatch(setErrorModeAC(null))\r\n        clearTimeout(x)\r\n    }, 3000 )\r\n\r\n\r\n    return (\r\n        <>\r\n            <Alert\r\n                message={`ERROR`}\r\n                description={errorMode}\r\n                type=\"error\"\r\n                closable\r\n                onClose={onClose}\r\n                banner\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport st from './Login.module.css'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {login_TC} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {ErrorHandler} from \"../ErrorHandler/ErrorHandler\";\r\nimport {ErrorMode_T} from \"../../redux/common-data-reducer\";\r\n\r\nexport const Login = () => {\r\n\r\n    const minPasswordLength = 5\r\n    const maxPasswordLength = 25\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\r\n    const userID = useSelector<AppStateType, string>(state => state.auth.id)\r\n    const errorMode = useSelector<AppStateType, ErrorMode_T>(state => state.commonData.errorMode)\r\n\r\n    type Values_T = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n    const validate = (values: Values_T) => {\r\n        const errors: Values_T = {};\r\n        if (!values.email) {\r\n            errors.email = 'Required';\r\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n            errors.email = 'Invalid email address';\r\n        }\r\n\r\n        if (!values.password) {\r\n            errors.password = 'Required';\r\n        } else if (values.password.length <= minPasswordLength || values.password.length >= maxPasswordLength) {\r\n            errors.password = `Must be longer then ${minPasswordLength} or shorter then ${maxPasswordLength}`;\r\n        }\r\n        return errors;\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate,\r\n        onSubmit: values => {\r\n            const {email, password, rememberMe} = values\r\n            dispatch(login_TC(email, password, rememberMe))\r\n            formik.resetForm();\r\n        },\r\n    });\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={`/profile/${userID}/`}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {errorMode !== null && <ErrorHandler/>}\r\n            <div className={st.loginWrapper}>\r\n                <div>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </div>\r\n                <div className={st.formWrapper}>\r\n                    <form className={st.formWrapper} onSubmit={formik.handleSubmit}>\r\n                        <div className={st.inputContainerStyles}>\r\n                        <span>\r\n                            Insert email address please:\r\n                        </span>\r\n                            <input type=\"email\"\r\n                                   {...formik.getFieldProps('email')}\r\n                            />\r\n                            {formik.touched.email && formik.errors.email &&\r\n                            <div className={st.errorStyles}>{formik.errors.email}</div>}\r\n                        </div>\r\n                        <div className={st.inputContainerStyles}>\r\n                        <span>\r\n                            Insert password please:\r\n                        </span>\r\n                            <input type=\"password\"\r\n                                   {...formik.getFieldProps('password')}\r\n                            />\r\n                            {formik.touched.password && formik.errors.password &&\r\n                            <div className={st.errorStyles}>{formik.errors.password}</div>}\r\n                        </div>\r\n                        <div className={st.checkboxStyles}>\r\n                            <input type=\"checkbox\"\r\n                                   checked={formik.values.rememberMe}\r\n                                   {...formik.getFieldProps('rememberMe')}\r\n                            /> Remember me\r\n                        </div>\r\n                        <div className={st.loginButtonStyles}>\r\n\r\n                            <button type={'submit'}>Login</button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","type SideBarLocalDataType = {\r\n\r\n}\r\n\r\nlet initialState = {}\r\n\r\nexport const sideBarReducer = (state: any = initialState, action: any) => {\r\n\r\n\r\n    return state\r\n}","import {createStore, combineReducers, applyMiddleware, compose} from 'redux'\r\nimport {profileReducer} from \"./profileReducer\";\r\nimport {dialogsReducer} from \"./dialogsReducer\";\r\nimport {sideBarReducer} from \"./sideBarReducer\";\r\nimport {usersReducer} from \"./usersReducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {commonDataReducer} from \"./common-data-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogPage: dialogsReducer,\r\n    sideBar: sideBarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    commonData: commonDataReducer,\r\n})\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\n// const store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n\r\nexport default store\r\n\r\n// // @ts-ignore\r\n// window.store = store\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport News from \"./components/News/News\";\nimport {HashRouter, Route, withRouter} from 'react-router-dom';\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport UsersContainer from './components/Users/UsersContainer';\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport {Login} from \"./components/Login/Login\";\nimport {connect, Provider} from \"react-redux\";\nimport {compose} from \"redux\";\nimport store, {AppStateType} from \"./redux/redux-store\";\nimport {getAuthUserDataTC} from \"./redux/auth-reducer\";\nimport {withSuspense} from \"./hoc/withSuspense\";\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\n\ntype CombinedTypes = MapStateToProps_T & MapDispatchToProps_T\n\nclass App extends React.Component<CombinedTypes> {\n\n    componentDidMount() {\n        this.props.getAuthUserDataTC()\n    }\n    render() {\n        if (!this.props.initMode) {\n            return <h1>Loading...</h1>\n        }\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer />\n                <Navbar/>\n                <div className='app-wrapper-content'>\n                    <Route path='/profile/:userId' render={() => <ProfileContainer/>}/>\n                    <Route path='/dialogs' render={withSuspense(DialogsContainer)} />\n                    <Route path='/users' render={() => <UsersContainer/>}/>\n                    <Route path='/news' component={News}/>\n                    <Route path='/music' component={Music}/>\n                    <Route path='/settings' component={Settings}/>\n                    <Route path='/login' component={Login}/>\n                </div>\n            </div>\n        );\n    }\n}\n\ntype MapDispatchToProps_T = {\n    getAuthUserDataTC:() => void\n}\n\ntype MapStateToProps_T = {\n    initMode: boolean\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToProps_T => {\n    return {\n        initMode: state.commonData.initMode\n    }\n}\n\nconst AppContainerData =  compose(\n    withRouter,\n    connect(mapStateToProps, {getAuthUserDataTC}))(App) as React.ComponentClass<{}>;\n\nexport const ContainerApp = () => {\n    return <HashRouter>\n        <Provider store={store}>\n            <AppContainerData />\n        </Provider>\n    </HashRouter>\n}\n\n\n\n","import React from \"react\";\r\n\r\nexport const withSuspense = (Component: any) => {\r\n    return (props: any) => {\r\n        return <React.Suspense fallback={<div>Loading...</div>}>\r\n            <Component {...props} />\r\n        </React.Suspense>\r\n    };\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React from \"react\";\r\n//\r\n//\r\n// export const withSuspense = (Component: any) => {\r\n//\r\n//     return (props: any) => {\r\n//\r\n//     }\r\n// }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {ContainerApp} from './App';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        < ContainerApp />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginWrapper\":\"Login_loginWrapper__1LBQI\",\"formWrapper\":\"Login_formWrapper__3VKRZ\",\"loginButtonStyles\":\"Login_loginButtonStyles__20Vzn\",\"inputContainerStyles\":\"Login_inputContainerStyles__302pS\",\"inputStyle\":\"Login_inputStyle__3qHMK\",\"checkboxStyles\":\"Login_checkboxStyles__1O5jZ\",\"errorStyles\":\"Login_errorStyles__3TmDf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photoURL\":\"Users_photoURL__WeB5h\",\"photoURLStyle\":\"Users_photoURLStyle__2Ob7-\",\"loadingSpinner\":\"Users_loadingSpinner__13ce8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__1qWVy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__u_q86\",\"notSelected\":\"Paginator_notSelected__11zYI\",\"selectedPage\":\"Paginator_selectedPage__5L11Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileImg\":\"ProfileInfo_profileImg__3Hb6H\",\"profilePerson\":\"ProfileInfo_profilePerson__1xcjw\",\"userAva\":\"ProfileInfo_userAva__1J0qt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainInfo\":\"Profile_mainInfo__3nfdS\",\"posts\":\"Profile_posts__VrSUE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3iZIK\",\"loginBlock\":\"Header_loginBlock__28-dB\"};","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, {Component} from \"react\";\r\n// import {Redirect} from \"react-router-dom\";\r\n//\r\n//\r\n// export const withAuthRedirect = (Component: any) => {\r\n//     class RedirectComponent extends React.Component<any, any> {\r\n//         render() {\r\n//             if (!this.props.isAuth) return <Redirect to='/login' />\r\n//             return <Component {...this.props} />\r\n//         }\r\n//     }\r\n//     return RedirectComponent\r\n// }\r\n","const SEND_MESSAGE = 'SEND-MESSAGE'\r\nconst FILL_MSG = 'DIALOGS/UPDATE-MSG-FIELD'\r\n\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimas'},\r\n        {id: 2, name: 'Stepan'},\r\n        {id: 3, name: 'Chuvak'},\r\n        {id: 4, name: 'Snejana'}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hey Bro!!!'},\r\n        {id: 2, message: 'How is your lessons?'},\r\n        {id: 3, message: 'Work harder, its the only way to become a specialist'}\r\n    ],\r\n    newMessageBody: ''\r\n}\r\n\r\ntype DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport type DialogsReducerLocalStateType = {\r\n    dialogs: DialogsType[]\r\n    messages: MessageType[]\r\n    newMessageBody: string\r\n}\r\n\r\ntype GeneralDialogsActionType = SendMessageTypeAC | UpdateMessageFieldAC_T\r\n\r\nexport const dialogsReducer = (state: DialogsReducerLocalStateType = initialState, action: GeneralDialogsActionType) => {\r\n\r\n    switch (action.type) {\r\n        case SEND_MESSAGE: {\r\n            let body = action.newMessageBody;\r\n            return {...state, messages: [...state.messages, {id: 6, message: body}], newMessageBody: ''}\r\n        }\r\n        case FILL_MSG: {\r\n            return {...state, newMessageBody: action.newMessageBody}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype UpdateMessageFieldAC_T = ReturnType<typeof updateMessageFieldAC>\r\nexport const updateMessageFieldAC = (newMessageBody: string) => {\r\n    return {type: FILL_MSG, newMessageBody} as const\r\n}\r\n\r\ntype SendMessageTypeAC = ReturnType<typeof sendMessageCreator>\r\nexport const sendMessageCreator = (newMessageBody: string) => {\r\n    return {type: SEND_MESSAGE, newMessageBody} as const\r\n}"],"sourceRoot":""}